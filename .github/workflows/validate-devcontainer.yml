name: Validate Devcontainer

on:
  push:
    paths:
      - '.devcontainer/'
  pull_request:
    paths:
      - '.devcontainer/'
  workflow_dispatch:

jobs:
  validate-json:
    runs-on: ubuntu-latest
    env:
      BASE_URL: https://raw.githubusercontent.com/devcontainers/spec/main/schemas/
      MS_URL: https://raw.githubusercontent.com/microsoft/vscode/main/extensions/configuration-editing/schemas/
      S2019: json-schema.org/draft/2019-09/schema

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
      - name: Set up Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: '22.x'
      - run: npm i ajv json-merge-patch ajv-keywords ajv-merge-patch ajv-formats ajv-errors
      - name: Stage Testing Area
        run: mkdir -p schemas/ && cp "${{github.workspace}}/.devcontainer/devcontainer.json" schemas/

      - name: Devcontainer Schemas
        env:
          BASE_SCHEMA: ${{env.BASE_URL}}devContainer.base.schema.json
          SCHEMA: ${{env.BASE_URL}}devContainer.schema.json
          FEATURE_SCHEMA: ${{env.BASE_URL}}devContainerFeature.schema.json
          CODESPACES_SCHEMA: ${{env.MS_URL}}devContainer.codespaces.schema.json
          VSCODE_SCHEMA: ${{env.MS_URL}}devContainer.vscode.schema.json
          VSCODE_MACHINE_SCHEMA: https://raw.githubusercontent.com/microsoft/vscode/refs/heads/main/extensions/configuration-editing/schemas/devContainer.vscode.schema.json
        run: |
          curl ${{env.BASE_SCHEMA}} | jq ". + {\"\$id\": \"${{env.BASE_SCHEMA}}\"}" > base.schema.json
          curl ${{env.SCHEMA}} | jq ". + {\"\$id\": \"${{env.SCHEMA}}\"}" > schema.json
          curl ${{env.FEATURE_SCHEMA}} | jq ". + {\"\$id\": \"${{env.FEATURE_SCHEMA}}\"}" > feature.schema.json
          curl ${{env.CODESPACES_SCHEMA}} | jq ". + {\"\$id\": \"${{env.CODESPACES_SCHEMA}}\"}" > codespaces.schema.json
          curl ${{env.VSCODE_SCHEMA}} | jq ". + {\"\$id\": \"${{env.VSCODE_SCHEMA}}\"}" > vscode.schema.json
          curl ${{env.VSCODE_MACHINE_SCHEMA}} | jq ". + {\"\$id\": \"vscode://schemas/settings/machine\"}" > vscode.machine.schema.json
          jq '.allOf[0] = {"$ref" : "${{env.SCHEMA}}"}' schema.json > complete.schema.json
          sed -i -e 's|json-schema.org/draft/2020-12/schema|${{env.S2019}}|g' base.schema.json
          sed -i -e 's|json-schema.org/draft-07/schema|${{env.S2019}}|g' feature.schema.json
          sed -i -e 's|json-schema.org/draft-07/schema|${{env.S2019}}|g' codespaces.schema.json
          sed -i -e 's|json-schema.org/draft-07/schema|${{env.S2019}}|g' vscode.schema.json
          sed -i -e 's|json-schema.org/draft-07/schema|${{env.S2019}}|g' vscode.machine.schema.json
        working-directory: schemas/

      - name: Validate Schema
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const Ajv2019 = require("ajv/dist/2019");
            const meta = require("ajv/dist/refs/json-schema-2019-09/meta/core");
            const metaSchema = require("ajv/dist/refs/json-schema-2019-09/schema");
            const metaValidation = require("ajv/dist/refs/json-schema-2019-09/meta/validation");
            const metaMetaData = require("ajv/dist/refs/json-schema-2019-09/meta/meta-data");
            const metaFormat = require("ajv/dist/refs/json-schema-2019-09/meta/format");
            const metaContent = require("ajv/dist/refs/json-schema-2019-09/meta/content");
            const metaApplicator = require("ajv/dist/refs/json-schema-2019-09/meta/applicator");
            
            const path = require("path");
            const fs = require('fs');
            const addFormats = require("ajv-formats");
            var ajv = new Ajv2019({
              strict: "None",
              strictRequired: "log",
              strictTuples: "log",
              strictTypes: "log",
              strictSchema: "log",
              allowUnionTypes: true,
              allowMatchingProperties: true,
              allowAdditionalProperties: true,
              allowAdditionalItems: true,
              allowEmptyObject: true,
              allowMultipleTypes: true,
              inlineRefs: true,
              useDefaults: "empty",
              coerceTypes: true,
              verbose: true,
              $data: true,
              validateSchema: "log",
              removeAdditional: "failing"
            });
            let addKeywords = require("ajv-keywords/dist/definitions");
            addFormats(ajv);
            addKeywords(ajv);
            ajv.addMetaSchema(meta, "http://${{env.S2019}}#", false);
            
            ajv.addSchema(require("./schemas/complete.schema.json"), ${{env.SCHEMA}});
            ajv.addSchema(require("./schemas/feature.schema.json"), ${{env.FEATURE_SCHEMA}});
            ajv.addSchema(require("./schemas/codespaces.schema.json"), ${{env.CODESPACES_SCHEMA}});
            ajv.addSchema(require("./schemas/vscode.schema.json"), ${{env.VSCODE_SCHEMA}});
            ajv.addSchema(require("./schemas/vscode.machine.schema.json"), "vscode://schemas/settings/machine");
            let validator = ajv.compile(require("./schemas/base.schema.json"), ${{env.BASE_SCHEMA}});
            
            const data = JSON.parse(fs.readFileSync(path.join(".", "schemas/devcontainer.json")));
            
            if (validator(data)) {
              console.log("devcontainer.json is fully validated"); 
            } else {
              let error = validator.errors[0];
              console.error("Msg: " + error.message);
              console.error("Keyword: " + error.keyword);
              console.error("Schema name: " + error.parentSchema.$id);
            }
        continue-on-error: true

